package View;

import java.text.DecimalFormat;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import perbankan.Bank;
import services.DatabaseService;

public class AdminView extends javax.swing.JPanel {
    private MainFrame mainFrame;
    private DefaultTableModel tableModel;
    private boolean isRowSelected = false;
    private int pointedIndex;
    private final Bank bank;
    
    /**
     * Creates new form AdminView
     */
    
    public AdminView(MainFrame mainFrame) {
        initComponents();
        this.mainFrame = mainFrame;
        this.bank = DatabaseService.getBank();
        this.tableModel = (DefaultTableModel)tableNasabah.getModel();
        this.tableModel.setRowCount(0);
        
        if(bank.getAllNasabah() != null) {
            updateTable();
        }
        
        tableNasabah.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    isRowSelected = tableNasabah.getSelectedRow() != -1;
                    updateButtonVisibility();
                }
            }
        });
        updateButtonVisibility();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancel = new javax.swing.JButton();
        labelNamaAwal = new javax.swing.JLabel();
        formTitle = new javax.swing.JLabel();
        inputNamaAwal = new javax.swing.JTextField();
        labelNamaAkhir = new javax.swing.JLabel();
        inputNamaAkhir = new javax.swing.JTextField();
        btnNasabahAction = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableNasabah = new javax.swing.JTable();
        btnHapusNasabah = new javax.swing.JButton();
        labelUsername = new javax.swing.JLabel();
        inputUsername = new javax.swing.JTextField();
        labelPassword = new javax.swing.JLabel();
        inputPassword = new javax.swing.JTextField();
        btnLogout = new javax.swing.JButton();

        btnCancel.setText("Batal");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        labelNamaAwal.setFont(new java.awt.Font("Inter Medium", 0, 12)); // NOI18N
        labelNamaAwal.setText("Nama Awal");

        formTitle.setFont(new java.awt.Font("Inter ExtraBold", 1, 20)); // NOI18N
        formTitle.setText("Data Nasabah");

        labelNamaAkhir.setFont(new java.awt.Font("Inter Medium", 0, 12)); // NOI18N
        labelNamaAkhir.setText("Nama Akhir");

        btnNasabahAction.setText("Tambah");
        btnNasabahAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNasabahActionActionPerformed(evt);
            }
        });

        tableNasabah.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Nama Awal", "Nama Akhir", "Username", "Password", "Saldo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableNasabah.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableNasabahMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableNasabah);
        if (tableNasabah.getColumnModel().getColumnCount() > 0) {
            tableNasabah.getColumnModel().getColumn(0).setMinWidth(16);
            tableNasabah.getColumnModel().getColumn(0).setMaxWidth(48);
        }

        btnHapusNasabah.setText("Hapus");
        btnHapusNasabah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusNasabahActionPerformed(evt);
            }
        });

        labelUsername.setFont(new java.awt.Font("Inter Medium", 0, 12)); // NOI18N
        labelUsername.setText("Username");

        labelPassword.setFont(new java.awt.Font("Inter Medium", 0, 12)); // NOI18N
        labelPassword.setText("Password");

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnNasabahAction)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHapusNasabah)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCancel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelNamaAkhir)
                                .addGap(18, 18, 18)
                                .addComponent(inputNamaAkhir))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelUsername)
                                    .addComponent(labelPassword)
                                    .addComponent(labelNamaAwal))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(inputPassword)
                                    .addComponent(inputUsername)
                                    .addComponent(inputNamaAwal)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLogout)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(formTitle)
                .addGap(209, 209, 209))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(formTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUsername)
                    .addComponent(inputUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPassword)
                    .addComponent(inputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNamaAwal)
                    .addComponent(inputNamaAwal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputNamaAkhir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNamaAkhir))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNasabahAction)
                    .addComponent(btnHapusNasabah)
                    .addComponent(btnCancel))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLogout)
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        updateButtonVisibility();
        tableNasabah.getSelectionModel().clearSelection();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnNasabahActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNasabahActionActionPerformed
        String namaAwal = inputNamaAwal.getText();
        String namaAkhir = inputNamaAkhir.getText();
        String username = inputUsername.getText();
        String password = inputPassword.getText();
        
        if (!namaAwal.equals("") && !namaAkhir.equals("") && !username.equals("") && !password.equals("")) {
            String usernameErrorMessage;
            if (isRowSelected) {
                // Ketika mengubah data nasabah yang ada, currentIndex adalah pointedIndex
                usernameErrorMessage = validateUsername(username, pointedIndex);
            } else {
                // Ketika menambah nasabah baru, currentIndex adalah -1 (tidak ada yang terpilih)
                usernameErrorMessage = validateUsername(username, -1);
            }
            if (usernameErrorMessage != null) {
                JOptionPane.showMessageDialog(this, usernameErrorMessage);
                return;
            }

            if (isRowSelected) {
                bank.updateNasabah(tableNasabah.getSelectedRow(), namaAwal, namaAkhir, username, password);
                JOptionPane.showMessageDialog(this, "Data berhasil diubah!");
            } else {
                bank.tambahNasabah(namaAwal, namaAkhir, username, password);
                JOptionPane.showMessageDialog(this, "Data berhasil ditambahkan!");
            }
            updateTable();
            clearTextField();
        } else {
            JOptionPane.showMessageDialog(this, "Mohon lengkapi data!");
        }
    }//GEN-LAST:event_btnNasabahActionActionPerformed

    private void tableNasabahMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableNasabahMouseClicked
        int row = tableNasabah.rowAtPoint(evt.getPoint());
        this.pointedIndex = tableNasabah.getSelectedRow();

        if(row >= 0) {
            String namaAwal = bank.getNasabah(pointedIndex).getNamaAwal();
            String namaAkhir = bank.getNasabah(pointedIndex).getNamaAkhir();

            inputNamaAwal.setText(namaAwal);
            inputNamaAkhir.setText(namaAkhir);
        }
    }//GEN-LAST:event_tableNasabahMouseClicked

    private void btnHapusNasabahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusNasabahActionPerformed
        if(isRowSelected) {
            int selectedRow = tableNasabah.getSelectedRow();
            bank.deleteNasabah(selectedRow);
            updateTable();
            clearTextField();
        } else {
            if(tableNasabah.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this,
                    "Data masih kosong!");
            } else {
                JOptionPane.showMessageDialog(this,
                    "Pilih data yang ingin dihapus terlebih dahulu!");
            }
        }
        updateButtonVisibility();
    }//GEN-LAST:event_btnHapusNasabahActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        mainFrame.showView(new HomeView(mainFrame));
    }//GEN-LAST:event_btnLogoutActionPerformed
    
    private String validateUsername(String username, int currentIndex) {
        // Validasi panjang username
        if (username.length() < 8) {
            return "Username harus memiliki minimal 8 karakter!";
        }
        // Validasi karakter yang diperbolehkan: huruf kecil, angka, dan underscore
        if (!username.matches("^[a-z0-9_]+$")) {
            return "Username hanya boleh terdiri dari huruf kecil, angka, dan underscore!";
        }
        // Validasi tidak mengandung spasi
        if (username.contains(" ")) {
            return "Username tidak boleh mengandung spasi!";
        }
        // Validasi username unik
        if (bank.getAllNasabah() != null) {
            for (int i = 0; i < bank.getJumlahNasabah(); i++) {
                if (i != currentIndex && username.equals(bank.getNasabah(i).getUsername())) {
                    return "Username '" + username + "' telah dipakai oleh nasabah lain!";
                }
            }
        }
        return null; // Username valid
    }
    
    public void updateTable() {
        int jumlahNasabah = bank.getJumlahNasabah();
        tableModel.setRowCount(0);

        for (int i = 0; i < jumlahNasabah; i++) {
            String namaAwal = bank.getNasabah(i).getNamaAwal();
            String namaAkhir = bank.getNasabah(i).getNamaAkhir();
            String username = bank.getNasabah(i).getUsername();
            String password = bank.getNasabah(i).getPassword();
            int saldo = bank.getNasabah(i).getTabungan().getSaldo();
            DecimalFormat formatter = new DecimalFormat("###,###");
            String saldoFormatted = formatter.format(saldo);
            
            tableModel.addRow(new Object[]{i + 1, namaAwal, namaAkhir, username,
                password, "Rp " + saldoFormatted});
        }
    }
    
    private void updateButtonVisibility() {
        isRowSelected = tableNasabah.getSelectedRow() != -1;

        if (isRowSelected) {
            int selectedRow = tableNasabah.getSelectedRow();
            int nasabahIndex = selectedRow;
            inputNamaAwal.setText(bank.getNasabah(nasabahIndex).getNamaAwal());
            inputNamaAkhir.setText(bank.getNasabah(nasabahIndex).getNamaAkhir());
            inputUsername.setText(bank.getNasabah(nasabahIndex).getUsername());
            inputPassword.setText(bank.getNasabah(nasabahIndex).getPassword());
            btnNasabahAction.setText("Ubah");
            btnHapusNasabah.setVisible(true);
            btnCancel.setVisible(true);
        } else {
            clearTextField();
            btnNasabahAction.setText("Tambah");
            btnHapusNasabah.setVisible(false);
            btnCancel.setVisible(false);
        }
    }
    
    private void clearTextField() {
        inputNamaAwal.setText("");
        inputNamaAkhir.setText("");
        inputUsername.setText("");
        inputPassword.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnHapusNasabah;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnNasabahAction;
    private javax.swing.JLabel formTitle;
    private javax.swing.JTextField inputNamaAkhir;
    private javax.swing.JTextField inputNamaAwal;
    private javax.swing.JTextField inputPassword;
    private javax.swing.JTextField inputUsername;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelNamaAkhir;
    private javax.swing.JLabel labelNamaAwal;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelUsername;
    private javax.swing.JTable tableNasabah;
    // End of variables declaration//GEN-END:variables
}
